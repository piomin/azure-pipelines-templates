parameters:
  - name: feedName
    default: 'pminkows'
  - name: moduleName
    default: ''
  - name: projectPath
    default: ''
  - name: testProjectPath
    default: ''
  - name: sonarProjectKey
    default: ''
  - name: dotnetVersion
    default: '9.x'
  - name: publish
    default: false
  - name: skipTests
    default: false

stages:
  - stage: Build
    displayName: 'Build/Publish'
    jobs:
      - job: Build_And_Publish
        steps:
          - checkout: appRepo
          - task: UseDotNet@2
            displayName: 'Init'
            inputs:
              version: ${{ parameters.dotnetVersion }}
          - task: DownloadSecureFile@1
            name: UnAuthNuGetConfig
            inputs:
              secureFile: 'UnAuthNuget.Config'

          - task: NuGetAuthenticate@1
          - task: DotNetCoreCLI@2
            displayName: Restore all packages
            inputs:
              command: 'restore'
#              arguments: '--source https://pkgs.dev.azure.com/pminkows/_packaging/pminkows/nuget/v3/index.json'
              projects: ${{ parameters.projectPath }}
#              projects: '*.sln'
              feedsToUse: 'select'
#              feedsToUse: 'config'
              vstsFeed: ${{ parameters.feedName }}
#              nugetConfigFile: '$(UnAuthNuGetConfig.secureFilePath)'

#          - task: Checkmarx AST@3
#            inputs:
#              CheckmarxService: 'Checkmarx'
#              projectName: '$(Build.Repository.Name)'
#              branchName: '$(Build.SourceBranchName)'

#          - task: SonarQubePrepare@7
#            inputs:
#              SonarQube: SonarQube
#              scannerMode: 'other'
#              displayName: Analysis Preparation
#              configMode: 'manual'
#              extraProperties: |
#                sonar.organization=piomin
#                sonar.projectKey=${{ parameters.sonarProjectKey }}
#                sonar.projectBaseDir=$(Build.SourcesDirectory)/src/${{ parameters.moduleName }}

# to enable QG
#                sonar.qualitygate.wait=true
          - task: SonarCloudPrepare@3
            inputs:
              SonarQube: SonarCloud
              scannerMode: 'dotnet'
              organization: 'piomin'
              projectKey: ${{ parameters.sonarProjectKey }}
              displayName: Analysis Preparation
              extraProperties: |
                sonar.verbose=true
                sonar.projectBaseDir=$(Build.SourcesDirectory)/src/${{ parameters.moduleName }}

          - task: DotNetCoreCLI@2
            displayName: 'Build Library'
            inputs:
              command: 'build'
              projects: ${{ parameters.projectPath }}
              arguments: '-c Release --no-restore'

          - ${{ if eq(parameters.skipTests, false) }}:
            - task: DotNetCoreCLI@2
              displayName: 'Run tests'
              inputs:
                command: 'test'
                projects: ${{ parameters.testProjectPath }}
                arguments: '-c Release --no-restore'
                publishTestResults: true
                testRunTitle: 'Unit Tests'

#          - task: SonarQubeAnalyze@7
#          - task: SonarQubePublish@7
#            inputs:
#              pollingTimeoutSec: '300'
#            displayName: Publish SonarQube Results

          - task: SonarCloudAnalyze@3
          - task: SonarCloudPublish@3
            inputs:
              pollingTimeoutSec: '300'
            displayName: Publish SonarQube Results
            condition: always()

          - ${{ if eq(parameters.publish, true) }}:
            - task: DotNetCoreCLI@2
              displayName: 'Pack package'
              inputs:
                command: 'pack'
                packagesToPack: ${{ parameters.projectPath }}
                arguments: '-c Release'
            - task: DotNetCoreCLI@2
              displayName: 'Publish package to Azure Artifacts'
              inputs:
                command: 'push'
                publishVstsFeed: ${{ parameters.feedName }}