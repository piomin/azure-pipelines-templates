parameters:
  - name: appName
    default: ''
  - name: projectPath
    default: ''
  - name: builderImage
    default: registry.redhat.io/rhel8/dotnet-90:latest
  - name: rootPath
    default: ''

stages:
  - stage: Build_Image
    displayName: 'Build Image'
    jobs:
      - job: Build_And_Publish
        steps:
          - checkout: appRepo
          - task: DownloadSecureFile@1
            name: NuGetConfig
            inputs:
              secureFile: 'NuGet.Config'
          - task: DownloadSecureFile@1
            name: CosignKey
            inputs:
              secureFile: 'cosign.key'
          - task: CmdLine@2
            inputs:
              script: |
                sudo apt-get update
                sudo apt-get -y install podman
            displayName: Install Podman
          - script: |
              COSIGN_VERSION=v2.4.0
              curl -sSL -o cosign https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64
              chmod +x cosign
              sudo mv cosign /usr/local/bin/cosign
              cosign version
            displayName: Install Cosign
          - script: |
              echo "Downloading roxctl..."
              curl -sSL https://mirror.openshift.com/pub/rhacs/assets/latest/bin/Linux/roxctl -o roxctl
              chmod +x roxctl
              sudo mv roxctl /usr/local/bin/
              echo "roxctl version:"
              roxctl version
            displayName: 'Install roxctl'
          - task: CmdLine@2
            inputs:
              script: |
                echo "Installing S2I CLI (s2i)..."
                curl -LO "https://github.com/openshift/source-to-image/releases/download/v1.5.1/source-to-image-v1.5.1-c301811d-linux-amd64.tar.gz"
                tar -xzf source-to-image-v1.5.1-c301811d-linux-amd64.tar.gz
                sudo mv s2i /usr/local/bin/
                s2i version
            displayName: Install S2I CLI
          - script: |
              sudo apt-get update
              sudo apt-get install -y curl
            displayName: "Install curl"
          - powershell: |
              $version = dotnet msbuild ${{ parameters.projectPath }} -getproperty:Version
              Write-Host "##vso[task.setvariable variable=appVersion]$version"
              Write-Host "##vso[task.setvariable variable=imageTag;isOutput=true]$version"
              Write-Host "App version: $version"
            displayName: Get Project Version
            name: SetVersion

          - script: |
              echo "Version:$(appVersion)"
              docker login registry.redhat.io -u $(RedHatUsername) -p $(RedHatPassword) 
              if [ -f "./Dockerfile" ]; then
                docker build -t quay.io/pminkows/${{ parameters.appName }}:$(appVersion) .
              else
                s2i build . ${{ parameters.builderImage }} quay.io/pminkows/${{ parameters.appName }}:$(appVersion) --volume $(NuGetConfig.secureFilePath):/opt/app-root/src/nuget.config:Z --context-dir ${{ parameters.rootPath }}
              fi
              docker images
            displayName: Build App

          - script: |
              docker login quay.io -u pminkows -p $(RedHatPassword)
              docker push quay.io/pminkows/${{ parameters.appName }}:$(appVersion)
            displayName: Push Image

          - script: |
              cosign sign --yes --key $(CosignKey.secureFilePath) quay.io/pminkows/${{ parameters.appName }}:$(appVersion)
            displayName: Sign Image
            env:
              COSIGN_PASSWORD: $(CosignKeyPassword)

          - script: |
              # Required env vars
              export ROX_API_TOKEN=$(AcsApiToken)
              export ROX_ENDPOINT=$(AcsCentralEndpoint)
              IMAGE=quay.io/pminkows/${{ parameters.appName }}:$(appVersion)
              
              echo "Scanning image: $IMAGE"
              roxctl image scan \
                --image "$IMAGE" \
                --insecure-skip-tls-verify
            displayName: Scan Image